unit DataThread;

interface
uses Classes, Forms;

const BufferSize = 5000;
      BaseAddress = $220;
      //BaseAddress = $3f0;
type  TGainCode = (Gain5vOr10v, Gain2_5vOr5v, Gain1_25vOr2_5v, Gain0_625vOr1_25v, Gain0_3125vOr0_625v);
      TJump10v  = (Jump5volt, Jump10volt);



type TDataCollectingThread = class(TThread)
private
   Buffer: array [1..BufferSize] of Single;
   FCardFound: Boolean;
   FJump10v: TJump10v;
   GainCode: WORD;
   procedure Refresh(Channel: Integer);
   function  ChooseGainCode(Volt: Extended): WORD;
public
   Active: array [0..15] of Boolean;
   Volt:   array [0..15] of Extended;
   Coefficient: array [0..15] of Extended;
   DataShift: array [0..15] of Extended;
   procedure Execute; override;
   constructor Create;
   property CardFound: Boolean read FCardFound;
   property Jump10v: TJump10v read FJump10v write FJump10v;
end;

const DataBufferLength = 10 * 60 * 60 * 24;
type TDataPack = array[0..15] of Extended;

var DataCollectingThread: TDataCollectingThread;
    Pos: Integer;
(* 10 записей в секунду на 60 секунд на 60 минут на 24 часа *)
    DataBuffer: array[0..DataBufferLength] of TDataPack;


implementation
uses A812;

constructor TDataCollectingThread.Create;
begin
    FCardFound := True;
    FJump10v   := Jump10volt;

    if A812_DriverInit = A812_DriverOpenError then
    begin
       FCardFound := False;
       Application.MessageBox('¬ системе не найден блок A812PG. Ћибо плата не установлена вообще, либо не совпадает адрес области пам€ти: 0х220.', 'Error', 1);
    end;

    if A812_Check_Address(BaseAddress) = A812_AdError1 then
    begin
       FCardFound := False;
       Application.MessageBox('Ѕлок A812PG не отзываетс€ на обращени€ по адресу 0х220', 'Error', 1);
    end;
      
    inherited Create(False);
end;


function TDataCollectingThread.ChooseGainCode(Volt: Extended): WORD;
begin
Volt := abs(Volt);
case FJump10v of
  Jump5volt:  begin
if Volt > 0.3122 then Result := 3;
if Volt > 0.623  then Result := 2;
if Volt > 1.24   then Result := 1;
if Volt > 2.4    then Result := 0;
if Volt < 2.4    then Result := 1;
if Volt < 1.24   then Result := 2;
if Volt < 0.623  then Result := 3;
if Volt < 0.3122 then Result := 4;
           end;
  Jump10volt: begin
if Volt > 0.622 then Result := 3;
if Volt > 1.23  then Result := 2;
if Volt > 2.4   then Result := 1;
if Volt > 4     then Result := 0;
if Volt < 4     then Result := 1;
if Volt < 2.4   then Result := 2;
if Volt < 1.23  then Result := 3;
if Volt < 0.622 then Result := 4;
           end;
end;
end;


procedure TDataCollectingThread.Refresh(Channel: Integer);
var Sum: Extended;
    i:   Integer;
    NewGainCode: WORD;
begin
    if not FCardFound then Exit;

    // choose gain code
    NewGainCode := ChooseGainCode(Volt[Channel]);

    // if it changed we must wait
    if (GainCode <> NewGainCode) then
    begin
       GainCode := NewGainCode;
       A812_Delay(BaseAddress, 8);
    end;

    // collect data
    if (A812_ADs_Float(BaseAddress, Channel, GainCode, WORD(FJump10v),
                @Buffer[1], BufferSize) = A812_NoError) then
    begin
        Sum := 0;
        for i := 1 to BufferSize do
            Sum := Sum + Buffer[i];
        Volt[Channel] := Sum / BufferSize;
        DataBuffer[Pos][Channel] := (Volt[Channel] + DataShift[Channel]) * Coefficient[Channel];
    end;
end;

procedure TDataCollectingThread.Execute;
var i: Integer;
begin
    while (not Terminated) do
    begin
        for i := 0 to 15 do
            if Active[i] then
                Refresh(i);
        Inc(Pos);
    end;
end;

end.
